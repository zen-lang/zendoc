{:ns zd
 :import #{zen-web zd.engines zd.events}

 remote
 {:zen/tags #{zen/schema}
  :type zen/map
   ;; TODO use zen-web/url
  :require #{:from}
  :keys {:from {:type zen/string}
         :key {:type zen/string
               :zen/desc "private ssh key to use"}
         :keystore {:type zen/string
                    :zen/desc "ssh keys directory"}
         :to {:type zen/string}
         :branch {:type zen/string}}}

 zendoc-config
 {:zen/tags #{zen/tag zen/schema}
  :type zen/map
  :keys {:root {:type zen/string}
         :paths {:type zen/vector
                 :every {:type zen/string}}
         :pull-rate {:type zen/integer}
         :remote {:confirms #{remote}}
         :remotes {:type zen/vector
                   :every {:confirms #{remote}}}}}

 query
 {:zen/tags #{zen/op}
  :zen/desc "datalog query"}

 submit
 {:zen/tags #{zen/op}
  :zen/desc "datalog document submit operation"}

 gitsync-doc
 {:zen/tags #{zen/op}
  :zen/desc "commits doc to its remote"}

 gitsync-delete-doc
 {:zen/tags #{zen/op}
  :zen/desc "removes document from index and pushes to a remote"}

 serve-static
 {:zen/tags #{zen/op zen-web/op}
  :engine zen-web.engines/serve-static
  :serve ["src"]}

 render-doc
 {:zen/tags #{zen/op zen-web/op}}

 delete-doc
 {:zen/tags #{zen-web/op zen/op}}

 append-doc
 {:zen/tags #{zen-web/middleware zen/op zen-web/op}
  :zen/desc "resolve page from route-params to zen document"
  :dir #{:in}}

 layout
 {:zen/tags #{zen-web/op zen/op zen-web/middleware}
  :zen/desc "wrap response in standard zd layout"
  :dir #{:out}}

 save-doc
 {:zen/tags #{zen-web/op zen/op}}

 doc-content
 {:zen/tags #{zen-web/op zen/op}}

 render-editor
 {:zen/tags #{zen-web/op zen/op}}

 render-widget
 {:zen/tags #{zen-web/op zen/op}}

 render-preview
 {:zen/tags #{zen-web/op zen/op}}

 errors-page
 {:zen/tags #{zen-web/op zen/op}}

 check-errors
 {:zen/tags #{zen-web/op zen/op}}

 new-doc
 {:zen/tags #{zen-web/op zen/op}}

 new-preview
 {:zen/tags #{zen-web/op zen/op}}

 create-doc
 {:zen/tags #{zen-web/op zen/op}}

 git-changes
 {:zen/tags #{zen-web/op zen/op}}

 search-page
 {:zen/tags #{zen-web/op zen/op}}

 api
 {:zen/tags #{zen-web/api}
  :engine zen-web/routemap
  ;; TODO move zen web defaults to zen web core
  ;; :mw [zen-web/defaults]
  "_errors" {:GET check-errors}
  "_search" {:GET search-page}
  "git" {:GET git-changes}
  "new" {:GET new-doc
         :POST create-doc
         "preview" {:POST new-preview}}
  :GET render-doc
  [:id] {;;:mw [append-doc layout]
         :DELETE delete-doc
         :POST save-doc
         :GET render-doc
         "preview" {:POST render-preview}
         "content" {:GET  doc-content}
         "widgets" {[:widget-id] {:GET render-widget}}
         "edit"    {:GET render-editor}}
  "static" {:* {:GET serve-static}}}

 http
 {:zen/tags #{zen/start zen-web/http zd.engines/http}
  :engine zen-web/httpkit
  :port 4444
  :zendoc zendoc
  :api api}

 zendoc
 {:zen/tags #{zen/start}
  :zen/state-key :zd/config
  :dir "docs"}

 system
 {:zen/tags #{zen/system}
  :start [zendoc http]}
 }
